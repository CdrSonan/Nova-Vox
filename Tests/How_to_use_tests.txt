This file should serve as a tutorial on how to use the test files for testing Voicebanks. Unlike the other files in this folder, it is not a test itself. The examples shown here use the Anata test as a base.

All test files are essentially Python scripts, in which you define the data you would normally enter into the editor, create a VocalSequence object using this data, and then save its audio.

The first thing you declare are the so-called borders. These are time markers that detail where the transitions between phonemes are.
Three borders form one transition. Additionally, there's three borders at the beginning and end of the sequence. This way, their total number has to match 3 * (number_of_phonemes + 1)
Borders can be whole, positive numbers only. A difference of 250 between two borders translates to one second of real time between them. So, with a length of 658, the example sequence is about 2.6 seconds long.
Example:
borders = [0, 2, 4, <- beginning of the A phoneme
           65, 70, 75, <- transition between A and N
           90, 102, 104, <-transition between N and the second A
           150, 152, 156, <- transition between second A and T
           164, 166, 172, <- transition between T and third A
           656, 657, 658 <- end of the third A. Notice that there is no comma at the end of this line!
          ]

Next, you declare the phonemes. Phonemes can be accessed with the keys specified for them with the Devkit, surrounded by quotation marks and separated by commas in square brackets.
Example:
phonemes = ["A", "N", "A", "T", "A"]

The offsets are declared in the same way as the borders. Their number needs to match the number of phonemes, and they describe how much of the beginning of each phoneme's audio sample to discard before using it.
This can be useful when the sample is used in the middle of a word and you don't want the beginning of the recording to cause a gap. Too high values might cause crashes.
Example:
offsets = [0, 40, 20, 0, 13]

RepetititionSpacing defines how much the audio sample overlaps when it is looped to make the phoneme longer than its original audio.
The first number (5) needs to match the number of phonemes in the sequence, the second should be between 0 and 1. 0 means no overlap, 1 means maximal overlap.
Example:
repetititionSpacing = torch.full([5], 0.8)

Pitch, Steadiness and Breathiness can be set in two ways: either through using torch.full([a], b), with a being the length of the curve you want to create and b being the value you want to set it to,
or with torch.linspace(a, b, c), which creates a linear slope starting at the value a and ending at the value b, with c defining the length of the slope. The length of the three objects should be the same,
and larger than the value of the largest border. The pitch is given as a wavelength in engine ticks, so a larger value means a lower pitch, while steadiness and breathiness take values from -1 to 1.
Example:
pitch = torch.full([700], 193)
steadiness = torch.full([700], -0.2)
breathiness = torch.full([700], 0.1)

After that, parts of the curves can be overridden by defining a part of a curve you want to override, and setting it to something different.
Example:
pitch[0:200] = torch.full([200], 150) <- sets the pitch to 150 in the beginning
pitch[200:350] = torch.linspace(150, 193, 150) <- adds a linear slope after the first section. In the range from 350 to 700, the pitch maintains the value of 193 that was originally set for it

Now, you create a VocalSequence object using all this data. The first number in the brackets always needs to be 0, the second on is the length of the pitch, steadiness and breathiness sequences,
and the rest should be left as it is.
Example:
sequence = VocalSequence(0, 700, vb, borders, phonemes, offsets, repetititionSpacing, pitch, steadiness, breathiness)

The final line is used for saving the result as a .wav file. The file name for the new file needs to be put in quotation marks, and the .wav extension must be explicitely included.
Example:
sequence.save("Anata test.wav")

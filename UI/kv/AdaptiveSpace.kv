#:kivy 2.0.0

#Copyright 2022, 2023 Contributors to the Nova-Vox project

#This file is part of Nova-Vox.
#Nova-Vox is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or any later version.
#Nova-Vox is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#You should have received a copy of the GNU General Public License along with Nova-Vox. If not, see <https://www.gnu.org/licenses/>.

<ParamCurve>:
    on_scroll_x: self.parent.triggerScroll()
    do_scroll: (True, False)
    scroll_type: ["bars"]
    bar_width: 10
    on_height: self.redraw()
    Widget:
        #widget covers the entire parent ScrollView, except for the scroll bar at the bottom
        size_hint: (None, None)
        y: self.parent.y + 10 * app.root.uiScale
        width: int(self.parent.xScale * self.parent.seqLength)
        height: self.parent.height - 10 * app.root.uiScale
        canvas:
            Color:
                rgba: (0.5, 0.5, 0.5, 1)
            #three horizontal lines corresponding to parameter values of 0, -1 and 1 respectively
            Line:
                points: [(0, self.parent.height / 2), (self.width, self.parent.height / 2)]
            Line:
                points: [(0, 0), (self.width, 0)]
            Line:
                points: [(0, self.parent.height), (self.width, self.parent.height)]

<PitchOptns>:
    on_scroll_x: self.parent.triggerScroll()
    do_scroll: (True, False)
    scroll_type: ["bars"]
    bar_width: 10
    on_height: self.redraw()
    Widget:
        #widget covers the entire parent ScrollView, except for the scroll bar at the bottom
        size_hint: (None, None)
        y: self.parent.y + 10 * app.root.uiScale
        width: int(self.parent.xScale * self.parent.seqLength)
        height: self.parent.height - 10 * app.root.uiScale
        canvas:
            Color:
                rgba: (0.5, 0.5, 0.5, 1)
            #five horizontal lines dividing the area into two bar diagrams on top of one another, and marking the positions of parameter values of 0, 0.5 and 1 for both
            Line:
                points: [(0, self.parent.height / 2), (self.width, self.parent.height / 2)]
            Line:
                points: [(0, 0), (self.width, 0)]
            Line:
                points: [(0, self.parent.height), (self.width, self.parent.height)]
            Line:
                points: [(0, self.parent.height / 4), (self.width, self.parent.height / 4)]
            Line:
                points: [(0, self.parent.height * 3 / 4), (self.width, self.parent.height * 3 / 4)]

<TimingOptns>:
    on_scroll_x: self.parent.triggerScroll()
    do_scroll: (True, False)
    scroll_type: ["bars"]
    bar_width: 10
    on_height: self.redraw()
    Widget:
        #widget covers the entire parent ScrollView, except for the scroll bar at the bottom
        size_hint: (None, None)
        y: self.parent.y + 10 * app.root.uiScale
        width: int(self.parent.xScale * self.parent.seqLength)
        height: self.parent.height - 10 * app.root.uiScale
        canvas:
            Color:
                rgba: (0.5, 0.5, 0.5, 1)
            #five horizontal lines dividing the area into two parameter curve areas on top of one another, and marking the positions of parameter values of 0, -1 and 1 for both
            Line:
                points: [(0, self.parent.height / 2), (self.width, self.parent.height / 2)]
            Line:
                points: [(0, 0), (self.width, 0)]
            Line:
                points: [(0, self.parent.height), (self.width, self.parent.height)]
            Line:
                points: [(0, self.parent.height / 4), (self.width, self.parent.height / 4)]
            Line:
                points: [(0, self.parent.height * 3 / 4), (self.width, self.parent.height * 3 / 4)]

<AdaptiveSpace>:
    #set properties required by child widgets, and use anchor that is slightly more resilient in case of UI formatting errors
    anchor_x: "center"
    anchor_y: "center"
    xScale: 1.
    seqLength: 5000